import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"


defaultTasks "exportAllNplThemes"


// Oereb: Datenumbau Nutzungsplanung
ext {
    //dbUriEdit = "jdbc:postgresql://localhost:54321/edit"
    //dbUserEdit = "gretl"
    //dbPwdEdit = "gretl"
    /************************************************************/
    dbUriOereb_devel = "jdbc:postgresql://10.36.43.197:54321/oereb"
    dbUserOereb_devel = "admin"
    dbPwdOereb_devel = "admin"
    /************************************************************/


    nplThemen = [
        ["npl_grundnutzung"],
        ["npl_ueberlagernd_flaeche"],
        ["npl_ueberlagernd_linie"],
        ["npl_ueberlagernd_punkt"],
        ["npl_baulinien"],
        ["npl_sondernutzungsplaene"],
        ["npl_laermempfindlichkeitsstufen"]
  
 
   ]
/*
    nplThemen = [
        ["npl_grundnutzung"]
    ]
*/
}


//def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToTempFolder =  System.getProperty("user.dir")

//def pathToZustaendigeStellen =  "sftp://geoapp.verw.rootso.org/opt/sogis_pic/geodata/"
//def pathTo = Paths.get(pathToGeodataFolder, "data.zip")


// URL der Gesetze und zuständigen Stellen ???
def cantonalLegalBasisBaseUrl = ""
def responsibleOfficesBaseUrl = ""
def GROUP = "Datenumbau NPLSO -> Transferstruktur (Staging)"                                         // wozu wird die GROUP benötigt?



// Gesetze und zuständige Stellen bei jeder Änderung in Transferstruktur in der Edit-DB importieren
task "downloadKantonaleGesetze"(type: Download){
    description = "Download kantonale Gesetze "
    src "https://geo.so.ch/geodata/ch.so.sk.gesetze.oereb/ch.so.sk.gesetze.xtf"
    dest pathToTempFolder
    overwrite true
}


task importCantonalLegalBasisToStaging(type: Ili2pgReplace, dependsOn: 'downloadKantonaleGesetze'){
    description = "Import kantonale Gesetze"
    group = GROUP
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    models = "OeREBKRMvs_V1_1"
    dbschema = "agi_oereb_npl_staging"
    dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.sk.gesetze.xtf"))
    dataset = "ch.so.sk.legal_basis" // Anderes (in diesem Fall beliebig) Dataset, da die dazugehörigen Daten nicht Bestandteil des Transfers (des exportierten Files) sein dürfen.
    disableValidation = true
}

task downloadZustaendigeStellen(type: Download){
    description = "Download zuständige Stellen"
    group = GROUP
    src "https://geo.so.ch/geodata/ch.so.agi.zustaendigestellen.oereb/ch.so.agi.zustaendigestellen.xtf"
    dest pathToTempFolder
    overwrite true
}

task importZustaendigeStellenToStaging(type: Ili2pgReplace, dependsOn: 'downloadZustaendigeStellen'){
    description = "Import zuständige Stellen"
    group = GROUP
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    models = "OeREBKRMtrsfr_V1_1"
    dbschema = "agi_oereb_npl_staging"
    dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.agi.zustaendigeStellen.xtf"))
    dataset = "ch.so.arp.nutzungsplanung" // Gleiches Dataset wie anschliessend die Daten des Datenumbaues, da Ämterinformationen Bestandteil des Transfers sein müssen. TODO: Herausforderung pro Gemeinde in Verbindung mit der/den fehlenden zuständigen Stelle(n)
    disableValidation = true
}


// Alle Nutzungsplanung-Themen umbauen und mit Iconizer die Symbole erzeugen
nplThemen.each { nplThema ->
    def thema = nplThema.getAt(0)

    // Löscht sämtliche Daten (ausser den Gesetzen) aus dem ÖREB-NPL-Staging-Schema in der Edit-DB      // Gesetze werden einmalig zu Beginn importiert
    task "nplDeleteUmbau_$thema"(type: SqlExecutor){
        database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
        sqlFiles = ['delete_npl_umbau.sql']
        println "hallo nplDeleteUmbau"
    }
    
    task "nplDatenumbau_$thema"(type: SqlExecutor, dependsOn: "nplDeleteUmbau_$thema"){
        database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
        sqlFiles = [thema + ".sql"]
        println "hallo nplUmbau"
    }
    
    // TODO: host, port, wms name and layer name as variable!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // Erzeugen der Symbole und Update der Daten in der Datenbank. Es wird ein WMS-Server benötigt.
    task "updateSymbols_$thema"(type: OerebIconizerQgis3, dependsOn: "nplDatenumbau_$thema"){
        description = "Erzeugt die Symbole und den Text für die einzelnen Legendeneinträge."
    
            sldUrl = "http://10.36.43.197:8083/qgis/oereb-wms-gpkg?&SERVICE=WMS&REQUEST=GetStyles&LAYERS=ch.so.Nutzungsplanung.NutzungsplanungGrundnutzung&SLD_VERSION=1.1.0"
    
            legendGraphicUrl = "http://10.36.43.197:8083/qgis/oereb-wms-gpkg?SERVICE=WMS&REQUEST=GetLegendGraphic&LAYER=ch.so.Nutzungsplanung.NutzungsplanungGrundnutzung&FORMAT=image/png&RULELABEL=false&LAYERTITLE=false&HEIGHT=35&WIDTH=70&SYMBOLHEIGHT=3&SYMBOLWIDTH=6&DPI=300"

            database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    
            //dbQTable = "arp_npl_grundnutzung_oereb.transferstruktur_legendeeintrag"
            dbQTable = "agi_oereb_npl_staging.transferstruktur_legendeeintrag"
            typeCodeAttrName = "artcode"
            symbolAttrName = "symbol"
            legendTextAttrName = "legendetext_de"
        /*
            finalizedBy {
                stopWMSDockerContainer??????????????????????'
            }
        */
    } 
    
}
 
 
 
// Export der gesamten Nutzungplanung????
task "nplExportNutzungsplanung"(type: Ili2pgExport){
    description = "Export der umgebauten Daten aus dem Staging-Schema"
    group = GROUP
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    models = "OeREBKRMtrsfr_V1_1"
    dbschema = "agi_oereb_npl_staging"
    dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.arp.nutzungsplanung.oereb.xtf"))
    //dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.arp.nutzungsplanung_" + thema + ".oereb.xtf"))
    dataset = "ch.so.arp.nutzungsplanung"
    disableValidation = true                                       //************************************************ Achtung disableValidation
    println "hallo nplExportNutzungsplanung"
}
 
 
 
    
// Dieser Task muss separat ausgeführt werden
/*
    task "nplImportNutzungsplanung_$thema"(type: Ili2pgReplace, dependsOn: "nplExportNutzungsplanung_$thema"){
        description = "Import der umgebauten Daten ins Schema agi_oereb_staging der Oereb"
        group = GROUP
        database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
        dbschema = "arp_npl"
        dataFile = file(Paths.get(pathToTempFolder.toString(), "2580_2018-02-13.xtf"))
        dataset = "2580"
        disableValidation = true                                       //************************************************ Achtung disableValidation
        strokeArcs = true
        //--createImportTabs --createBasketCol --createDatasetCol ???
    }
*/





// nur zum Testen
/*
task importExportXtf(type: Ili2pgReplace){
    description = "Import benötigte NPL-Daten in Entwicklugns-DB"
    group = GROUP
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    dbschema = "agi_oereb_npl_staging"
    dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.arp.nutzungsplanung_npl_grundnutzung.oereb.xtf"))
    dataset = "9999"
    disableValidation = true                                                                     //**************** Achtung disableValidation
    strokeArcs = true
}
*/


task transformAllNplThemes(){
    description = "Transform all NPL-Data"
    //ignoreFailures = true
}

transformAllNplThemes.finalizedBy {
    tasks.findAll { task -> task.name.startsWith("updateSymbols") }
}
